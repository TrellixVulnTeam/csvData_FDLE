import sqlalchemy
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String,Boolean, create_engine
from sqlalchemy.dialects.mysql.base import DECIMAL
from sqlalchemy.dialects.mysql import DATETIME
from sqlalchemy.orm import sessionmaker

Base = declarative_base()
class PlayerGame(Base):
    __tablename__='PlayerGame'

    StatID = Column(Integer, primary_key = True)
    TeamID = Column(Integer)
    PlayerID = Column(Integer)
    SeasonType = Column(Integer)
    Season = Column(Integer)
    Name = Column(String(50))
    Team = Column(String(10))
    Position = Column(String(10))
    PositionCategory = Column(String(10))
    Started = Column(Integer)
    BattingOrder = Column(Integer)
    FanDuelSalary = Column(Integer)
    DraftKingsSalary = Column(Integer)
    FantasyDataSalary = Column(Integer)
    YahooSalary = Column(Integer)
    InjuryStatus = Column(String(50))
    InjuryBodyPart = Column(String(50))
    InjuryStartDate = Column(DATETIME)
    InjuryNotes = Column(String(250))
    FanDuelPosition = Column(String(10))
    DraftKingsPosition = Column(String(10))
    YahooPosition = Column(String(10))
    OpponentRank = Column(Integer)
    OpponentPositionrank = Column(Integer)
    GlobalTeamID = Column(Integer)
    FantasyDraftSalary = Column(Integer)
    FantasyDraftPosition = Column(String(10))
    GameID = Column(Integer)
    OpponentID = Column(Integer)
    Opponent = Column(String(10))
    Day = Column(DATETIME)
    DateTime = Column(DATETIME)
    HomeOrAway = Column(String(4))
    IsGameOver = Column(Boolean)
    GlobalGameID = Column(Integer)
    GlobalOponentID = Column(Integer)
    Updated = Column(DATETIME)
    Games = Column(Integer)
    FantasyPoints = Column(DECIMAL(11,2))
    AtBats = Column(DECIMAL(11,2))
    Runs = Column(DECIMAL(11,2))
    Hits = Column(DECIMAL(11,2))
    Singles = Column(DECIMAL(11,2))
    Doubles = Column(DECIMAL(11,2))
    Triples = Column(DECIMAL(11,2))
    HomeRuns = Column(DECIMAL(11,2))
    RunsBattedIn = Column(DECIMAL(11,2))
    BattingAverage = Column(DECIMAL(11,2))
    Outs = Column(DECIMAL(11,2))
    Strikeouts = Column(DECIMAL(11,2))
    Walks = Column(DECIMAL(11,2))
    HitByPitch = Column(DECIMAL(11,2))
    Sacrifices = Column(DECIMAL(11,2))
    SacrificeFlies = Column(DECIMAL(11,2))
    GroundIntoDoublePlay = Column(DECIMAL(11,2))
    StolenBases = Column(DECIMAL(11,2))
    CaughtStealing = Column(DECIMAL(11,2))
    PitchesSeen = Column(DECIMAL(11,2))
    OnBasePercentage = Column(DECIMAL(11,2))
    SluggingPercentage = Column(DECIMAL(11,2))
    OnBasePlusSlugging = Column(DECIMAL(11,2))
    Errors = Column(DECIMAL(11,2))
    Wins = Column(DECIMAL(11,2))
    Losses = Column(DECIMAL(11,2))
    Saves = Column(DECIMAL(11,2))
    InningsPitchedDecimal = Column(DECIMAL(11,2))
    TotalOutsPitched = Column(DECIMAL(11,2))
    InningsPitchedFull = Column(DECIMAL(11,2))
    InningsPitchedOuts = Column(DECIMAL(11,2))
    EarnedRunAverage = Column(DECIMAL(11,2))
    PitchingHits = Column(DECIMAL(11,2))
    PitchingRuns = Column(DECIMAL(11,2))
    PitchingEarnedRuns = Column(DECIMAL(11,2))
    PitchingWalks = Column(DECIMAL(11,2))
    PitchingStrikeouts = Column(DECIMAL(11,2))
    PitchingHomeRuns = Column(DECIMAL(11,2))
    PitchesThrown = Column(DECIMAL(11,2))
    PitchesThrownStrikes = Column(DECIMAL(11,2))
    WalksHitsPerInningsPitched = Column(DECIMAL(11,2))
    PitchingBattingAverageAgainst = Column(DECIMAL(11,2))
    GrandSlams = Column(DECIMAL(11,2))
    FantasyPointsFanDuel = Column(DECIMAL(11,2))
    FantasyPointsDraftKings = Column(DECIMAL(11,2))
    FantasyPointsYahoo = Column(DECIMAL(11,2))
    PlateAppearances = Column(DECIMAL(11,2))
    TotalBases = Column(DECIMAL(11,2))
    FlyOuts = Column(DECIMAL(11,2))
    GroundOuts = Column(DECIMAL(11,2))
    LineOuts = Column(DECIMAL(11,2))
    PopOuts = Column(DECIMAL(11,2))
    IntentionalWalks = Column(DECIMAL(11,2))
    ReachedOnError = Column(DECIMAL(11,2))
    BallsInPlay = Column(DECIMAL(11,2))
    BattingAverageOnBallsInPlay = Column(DECIMAL(11,2))
    WeightedOnBasePercentage = Column(DECIMAL(11,2))
    PitchingSingles = Column(DECIMAL(11,2))
    PitchingDoubles = Column(DECIMAL(11,2))
    PitchingTriples = Column(DECIMAL(11,2))
    PitchingGrandSlams = Column(DECIMAL(11,2))
    PitchingHitByPitch = Column(DECIMAL(11,2))
    PitchingSacrifices = Column(DECIMAL(11,2))
    PitchingSacrificeFlies = Column(DECIMAL(11,2))
    PitchingGroundIntoDoublePlay = Column(DECIMAL(11,2))
    PitchingCompleteGames = Column(DECIMAL(11,2))
    PitchingShutOuts = Column(DECIMAL(11,2))
    PitchingNoHitters = Column(DECIMAL(11,2))
    PitchingPerfectGames = Column(DECIMAL(11,2))
    PitchingPlateAppearances = Column(DECIMAL(11,2))
    PitchingTotalBases = Column(DECIMAL(11,2))
    PitchingFlyOuts = Column(DECIMAL(11,2))
    PitchingGroundOuts = Column(DECIMAL(11,2))
    PitchingLineOuts = Column(DECIMAL(11,2))
    PitchingPopOuts = Column(DECIMAL(11,2))
    PitchingIntentionalWalks = Column(DECIMAL(11,2))
    PitchingReachedOnError = Column(DECIMAL(11,2))
    PitchingCatchersInterference = Column(DECIMAL(11,2))
    PitchingBallsInPlay = Column(DECIMAL(11,2))
    PitchingOnBasePercentage = Column(DECIMAL(11,2))
    PitchingSluggingPercentage = Column(DECIMAL(11,2))
    PitchingOnBasePlusSlugging = Column(DECIMAL(11,2))
    PitchingStrikeoutsPerNineInnings = Column(DECIMAL(11,2))
    PitchingWalksPerNineInnings = Column(DECIMAL(11,2))
    PitchingBattingAverageOnBallsInPlay = Column(DECIMAL(11,2))
    PitchingWalksPerNineInnings = Column(DECIMAL(11,2))
    PitchingWeightedOnBasePercentage = Column(DECIMAL(11,2))
    DoublePlays = Column(DECIMAL(11,2))
    PitchingDoublePlays = Column(DECIMAL(11,2))
    BattingOrderConfirmed = Column(Boolean)
    IsolatedPower = Column(DECIMAL(11,2))
    FieldingIndependentPitching = Column(DECIMAL(11,2))
    PitchingQualityStarts = Column(DECIMAL(11,2))
    PitchingInningStarted = Column(Integer)

    def __repr__(self):
        return '<Player: {0} r>'.format(self.Name)

engine = create_engine('mysql+pymysql://root:uerbc0707@localhost/baseball', echo = True)
Base.metadata.create_all(engine)



